cmake_minimum_required(VERSION 3.15)

#! Check every comment after the "#!"

#! CHANGE YOUR PROJECT NAME
#  It is used as your project's main executable name. 
set(PROJECT_NAME myshell)
project(${PROJECT_NAME} C CXX) # project(${PROJECT_NAME} C CXX ASM)

set(CMAKE_CXX_STANDARD 17)

##########################################################
# User configurable options of the template
##########################################################
# Note: symbols like WARNINGS_AS_ERRORS in configuration are intentionally variables
# and not CMake options --using options creates too much problem for students.

#! It is a good practice to set "WARNINGS_AS_ERRORS" ON,
#  but sometimes it creates too much trouble, so default is OFF.
set(WARNINGS_AS_ERRORS ON)

#! Always use PVS Studio while developing. 
set(ENABLE_PVS_STUDIO ON)

#! Select appropriate sanitizers.
#  Definitely enable sanitizers while developing.
#  Disable it for the production builds and before submitting for grading.
#  Only one of Memory (MSAN), Address (ASAN), or Thread (TSan)
#  sanitizers is applicable at the time -- the first defined.

#! UndefinedBehaviorSanitizer (UBSan)
#  Info: https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html
set(ENABLE_UBSan OFF)
#! AddressSanitizer -- detects use after free or after scope exit,
#  memory overflows and leaks.  
#  Info: https://github.com/google/sanitizers/wiki/AddressSanitizer
set(ENABLE_ASAN ON)
#! ThreadSanitizer -- detects data races.
set(ENABLE_TSan OFF)
#! MemorySanitizer detects uninitialized memory reads 
#  Info: https://github.com/google/sanitizers/wiki/MemorySanitizer
set(ENABLE_MSAN OFF)


#! Be default -- build release version if not specified otherwise.
if (NOT CMAKE_BUILD_TYPE)
	set(CMAKE_BUILD_TYPE Release)
endif ()

# Warnings as errors should be imported here -- do not move this line
include(cmake/CompilerWarnings.cmake)

##########################################################
# Project files, packages, libraries and so on
##########################################################

#! Project main executable source compilation
file(GLOB builtin_parsers
		"myshell/src/builtin_parsers/*"
		"myshell/include/builtin_parsers/*"
		)
message("builtin_parsers: ${builtin_parsers}")
add_executable(${PROJECT_NAME}
		myshell/src/main.cpp
		myshell/src/options_parser.cpp myshell/include/options_parser.h
		myshell/include/myshell_exit_codes.h myshell/include/myshell_exceptions.h
		myshell/src/builtin_parsers/builtin_parser.cpp myshell/include/builtin_parsers/builtin_parser.h
		myshell/src/myshell_commands.cpp myshell/include/myshell_commands.h
		myshell/src/builtin_parsers/merrno_parser.cpp myshell/include/builtin_parsers/merrno_parser.h
		${builtin_parsers})

#! Put path to your project headers
target_include_directories(${PROJECT_NAME} PRIVATE myshell/include)

#! Add external packages
# options_parser requires boost::program_options library
find_package(Boost 1.71.0 COMPONENTS program_options system filesystem REQUIRED)
target_include_directories(${PROJECT_NAME} PRIVATE ${Boost_INCLUDE_DIR})
target_link_libraries(${PROJECT_NAME} Boost::program_options Boost::system Boost::filesystem)
# add readline library
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH}
		${CMAKE_CURRENT_SOURCE_DIR}/cmake)
find_package(Readline)
target_include_directories(${PROJECT_NAME} PRIVATE ${Readline_INCLUDE_DIR})
target_link_libraries(${PROJECT_NAME} ${Readline_LIBRARY})

#! Additional executables
add_executable(wildcard_matching examples/regex_matching.cpp)
add_executable(paths examples/paths.cpp)
add_executable(pipes examples/pipes.cpp)
add_executable(pipe_ls_wc examples/pipe_ls_wc.cpp)

##########################################################
# Fixed CMakeLists.txt part
##########################################################

INSTALL(PROGRAMS
		$<TARGET_FILE:${PROJECT_NAME}>	# ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}
		DESTINATION bin)

# Define ALL_TARGETS variable to use in PVS and Sanitizers
set(ALL_TARGETS ${PROJECT_NAME})

# Include CMake setup
include(cmake/main-config.cmake)

add_subdirectory(mycat utils)